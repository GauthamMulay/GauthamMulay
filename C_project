#include<stdio.h>
#include<windows.h>
#include <conio.h>

int player[5]={0,0,0,0,0};//(log of player placements)
int comp[5]={7,0,0,0,0};//(log of computer placements)
int availible[8] = {1,2,3,4,5,6,8,9};//availible slots
char square[10] = { 'o', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
int ctr=0;//(counts player moves)
int ysetb =3;
int slot=1;
int win=0;
char ch;

void playerturn();
void printcursor(int);

int in(int arr[],int n)
{
	for(int i=0;arr[i]!=0;i++)
		if(arr[i]==n)
			return(1);
	return(0);
}

int notin(int arr[],int n)
{
	for(int i=0;arr[i]!=0;i++)
		if(arr[i]==n)
			return(0);
	return(1);
}

void rem(int arr[], int n,int l)
{
    for (int i = 0; i < l; i++)
        if (arr[i] == n)
        {
            arr[i] = 0;
            break;
        }
}

void add(int arr[], int n, int l)
{
    for (int i = 0; i < l; i++)
        if (arr[i] == 0)
        {
            arr[i] = n;
            break;
        }
}


void won()
{
    COORD coordend; coordend.X = 0; coordend.Y = 20;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordend);
    if (win == 1)
	{
        printf("\ncomputer wins!");
	BEEP(750,800);
	}
    else
        printf("\nYou tied!!");
}

void printbrd(char ch, int slot)
{
    int x, y;

    if ((1 <= slot) && (slot <= 3))
    {
        y = 5; x = 1 + (slot - 1) * 4;
    }
    if ((4 <= slot) && (slot <= 6))
    {
        y = 8; x = 1 + (slot - 4) * 4;
    }
    if ((7 <= slot) && (slot <= 9))
    {
        y = 11; x = 1 + (slot - 7) * 4;
    }

    COORD coord; coord.X = x; coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
    printf("%c", ch);

}


int compturn()
{

if(ctr==1)
{
        
        if(in(player,3))//(opp. corner)
            return(9);
        else if(in(player,2)||in(player,6))//(non adj. side)
            return(9);
        else if(in(player,4)||in(player,8))//(adj. side)
        {
            if(in(player,4))
                return(9);
            else
                return(1);
	    }
        else if(in(player,1)||in(player,9))//A4(non opp. corner)
            return(3);//print("A4s1")
        else//A5(centre),print("A5s1")
            return(9);//A5s2
            
}
        
    if(ctr==2)
{
        
        if (in(player, 3) && in(comp, 9))//A1
        {
            if (notin(player, 8))//("A1s2")
            {
                win = 1;
                return(8);
            }//W
            else
                return(1);//A1s3
        }
                
        else if (in(comp, 9) && (in(player, 2) || in(player, 6)))//A2
        {
            if (notin(player, 8))//print("A2s2")
            {
                win = 1;
                return(8);
            }//W
            else
                return(5);//A2s3
        }
                
        else if ((in(player, 4) || in(player, 8)) && (in(comp, 9) || in(comp, 1)) && (notin(player, 5)))//A3
        {
            if (in(player, 4) && in(comp, 9))//print("A3s2")
                if (notin(player, 8))
                {
                    win = 1;
                    return(8);
                }//W
                else
                    return(3);//A3s3

            else if (in(player, 8) && in(comp, 1))
                if (notin(player, 4))
                {
                    win = 1;
                    return(4);
                }//W
                else
                    return(3);//A3s3
        }
        else if ((in(player, 1) || in(player, 9)) && in(comp, 3))//A4
        {
            if (notin(player, 5))//print("A4s2")
            {
                win = 1;
                return(5);
            }//W
            else if (in(player, 1))
                return(9);//A4s3
            else
                return(1);//A4s3
        }
        else//A5
        {
            if (notin(player, 8))//print("A5s2")
            {
                win = 1;
                return(8);
            }//W
            else
                return(2);//A5s3
        }

}
        
    if(ctr==3)
{
        if (in(player, 3) && in(comp, 9) && in(comp, 1))//A1(player in 8)
        {
            if (notin(player, 4))//print("A1s3")
            {
                win = 1;
                return(4);
            }//W
            else
            {
                win = 1;
                return(5);
            }//W
        }
        else if ((in(comp, 9)) && (in(comp, 5)) && (in(player, 2) || in(player, 6)))//A2
        {
            if (notin(player, 1))//print("A2s3")
            {
                win = 1;
                return(1);
            }//W
            else
            {
                win = 1;
                return(3);
            }//W
        }
        else if ((in(player, 4) || in(player, 8)) && (in(comp, 9) || in(comp, 1)) && in(comp, 3))//A3
        {
            if (in(comp, 9))//print("A3s3")
            {
                if (notin(player, 6))
                {
                    win = 1;
                    return(6);
                }//W
                else
                {
                    win = 1;
                    return(5);
                }//W
            }
            else//if 1 in comp
            {
                if (notin(player, 2))
                {
                    win = 1;
                    return(2);
                }//W
                else
                {
                    win = 1;
                    return(5);
                }//W
            }
        }
        else if ((in(player, 1) || in(player, 9)) && (in(comp, 3)) && (in(comp, 1) || in(comp, 9)))
        {
            if (in(comp, 1))//print("A4s3")
            {
                if (notin(player, 2))
                {
                    win = 1;
                    return(2);
                }//W
                else
                {
                    win = 1;
                    return(4);
                }//W
            }
            else//9 in comp
            {
                if (notin(player, 6))
                {
                    win = 1;
                    return(6);
                }//W
                else
                {
                    win = 1;
                    return(8);
                }//W
            }
        }
        else//A5
        {
            if (notin(player, 4))//print("A5s3")
                return(4);//A5s4(T)
            else
                return(6);//A5s4(T)
        }
}               
    if(ctr==4)
{	//print("A5s4")
        if (notin(player, 1))//A5
        {
	    if(in(comp,4))
            win = 1;
	    else
	    win = 2;
            return(1);
        }//W or T
        else if (notin(player, 3))
        {
            if(in(comp,6))
            win = 1;
	    else
	    win = 2;
            return(3);
        }//W or T
        else if (notin(player, 4) && notin(comp, 4))
        {
            win = 2;
            return(4);
        }//T
        else
        {
            win = 2;
            return(6);
        }//T
}
}



int callcompturn()
{
    ctr++;
    int c = compturn();
    rem(availible, c,8);
    add(comp, c, 5);
    printbrd('O', c);
    if (win == 0)
	{
	slot=1;
	printcursor(slot);
	while (1)
        { 
            if (kbhit)
            {
                ch = getch();
                if((int)ch == 27)
                    break;
                if (ch == ' ')
                {
                    if (slot == 9)
                        slot = 1;
                    else
                        slot += 1;
                }
                printcursor(slot);
		if((ch=='x'||ch=='X'))
			playerturn();
            }
        }
	}
    else
        won();
    
}

void playerturn()
{
    
    int p=slot;
 
    rem(availible, p,8);
    add(player, p,5);
    printbrd('X',p);
    if (win == 0)
        callcompturn();
    else
        won();

}


void printcursor(int slot)
{
    int x, y;

    if ((1 <= slot) && (slot <= 3))
    {
        y = 5; x = 1 + (slot - 1) * 4;
    }
    if ((4 <= slot) && (slot <= 6))
    {
        y = 8; x = 1 + (slot - 4) * 4;
    }
    if ((7 <= slot) && (slot <= 9))
    {
        y = 11; x = 1 + (slot - 7) * 4;
    }

    COORD coord; coord.X = x; coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
 
}

int checkwin()
{
	 if (square[1] == square[2] && square[2] == square[3])
        return 1;

    else if (square[4] == square[5] && square[5] == square[6])
        return 1;

    else if (square[7] == square[8] && square[8] == square[9])
        return 1;

    else if (square[1] == square[4] && square[4] == square[7])
        return 1;

    else if (square[2] == square[5] && square[5] == square[8])
        return 1;

    else if (square[3] == square[6] && square[6] == square[9])
        return 1;

    else if (square[1] == square[5] && square[5] == square[9])
        return 1;

    else if (square[3] == square[5] && square[5] == square[7])
        return 1;

    else if (square[1] != '1' && square[2] != '2' && square[3] != '3' &&
        square[4] != '4' && square[5] != '5' && square[6] != '6' && square[7]
        != '7' && square[8] != '8' && square[9] != '9')

        return 0;
    else
        return  - 1;
}

    
void board()
{
	system("cls");
    printf("\n\n\tTic Tac Toe\n\n");

    printf("Player 1 (X)  -  Player 2 (O)\n\n\n");


    printf("     |     |     \n");
    printf("  %c  |  %c  |  %c \n", square[1], square[2], square[3]);

    printf("_____|_____|_____\n");
    printf("     |     |     \n");

    printf("  %c  |  %c  |  %c \n", square[4], square[5], square[6]);

    printf("_____|_____|_____\n");
    printf("     |     |     \n");

    printf("  %c  |  %c  |  %c \n", square[7], square[8], square[9]);

    printf("     |     |     \n\n");
}

char mark(int p)
{
 if (p==1)
	return 'X';
 else
	return 'O';
}




    int main()
    {	
	int m;
	printf("Enter Game Mode:1.VS COMPUTER  2.VS PLAYER");
	scanf("%d",&m);
	if(m==1)
	{
	system("cls");
    	printf("\n\n\tTic Tac Toe\n\n");

    	printf("Player 1 (X)  -  Computer (O)\n\n\n");
        printf("   |   |   \n");
        printf("   |   |   \n");
        printf("___|___|___\n");
        printf("   |   |   \n");
        printf("   |   |   \n");
        printf("___|___|___\n");
        printf("   |   |   \n");
        printf(" O |   |   \n");
        printf("   |   |   \n");
        printf("enter space to move to next slot.Press enter to place.");
        printcursor(slot);
        
        while (1)
        { 
            if (kbhit)
            {
                ch = getch();
                if((int)ch == 27)
                    break;
                if (ch == ' ')
                {
                    if (slot == 9)
                        slot = 1;
                    else
                        slot += 1;
                }
                printcursor(slot);
		if((ch=='x'||ch=='X'))
		{
			playerturn();
			break;
		}
            }
        }
	COORD coordend; coordend.X = 0; coordend.Y = 13;
        SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordend);
        }
	else
	{
	int player = 1, i, choice;

    char mark;
    do
    {
        board();
        player = (player % 2) ? 1 : 2;

        printf("Player %d, enter a number:  ", player);
        scanf("%d", &choice);

        mark = (player == 1) ? 'X' : 'O';

        if (choice == 1 && square[1] == '1')
            square[1] = mark;

        else if (choice == 2 && square[2] == '2')
            square[2] = mark;

        else if (choice == 3 && square[3] == '3')
            square[3] = mark;

        else if (choice == 4 && square[4] == '4')
            square[4] = mark;

        else if (choice == 5 && square[5] == '5')
            square[5] = mark;

        else if (choice == 6 && square[6] == '6')
            square[6] = mark;

        else if (choice == 7 && square[7] == '7')
            square[7] = mark;

        else if (choice == 8 && square[8] == '8')
            square[8] = mark;

        else if (choice == 9 && square[9] == '9')
            square[9] = mark;

        else
        {
            printf("Invalid move ");

            player--;
        }
        i = checkwin();

        player++;
    }while (i ==  - 1);

    board();

    if (i == 1)
	{
	 printf("==>\aPlayer %d win ", --player);
	 BEEP(750,800);
	}
    else
        printf("==>\aGame draw");


    return 0;
}

		
    }
